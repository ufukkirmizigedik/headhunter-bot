import os
import requests
import re
import openai
from bs4 import BeautifulSoup
import json
from datetime import datetime, timedelta
import random
import time
from openai import OpenAI

# === API Anahtarlarƒ± ===
access_token = "your access token"
OPENAI_API_KEY = "your api key"
client = OpenAI(api_key=OPENAI_API_KEY)



headers = {
    "Authorization": f"Bearer {access_token}",
    "User-Agent": "InsightJobBot/1.0 (info@insightgram.ru)" #Write yours from hh.ru
}




search_queries = [
    "RPA",
    "RPA AND Pyhton",
    "AI AND automation",
    "AI agent OR AI –∞–≥–µ–Ω—Ç",
    "ChatGPT OR GPT-4",
    "GPT API integration",
    "low-code OR no-code AND AI",
    "Python AND automation",
    "Python AND –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
]


profile_summary = """
–ú–µ–Ω—è –∑–æ–≤—É—Ç –£—Ñ—É–∫, —è –∏–Ω–∂–µ–Ω–µ—Ä-–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ —Å –æ–ø—ã—Ç–æ–º –±–æ–ª–µ–µ 16 –ª–µ—Ç. –Ø –ø—Ä–æ–µ–∫—Ç–∏—Ä—É—é –∏ —Ä–µ–∞–ª–∏–∑—É—é —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ, –±–µ–∑ —É—á–∞—Å—Ç–∏—è —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –æ—Ç —É—Ä–æ–≤–Ω—è ¬´–∂–µ–ª–µ–∑–∞¬ª –¥–æ –ò–ò-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ Telegram-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π.

–Ø —Å–æ–≤–º–µ—â–∞—é –æ–ø—ã—Ç –≤:
‚Äî —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ü–û (Python full-stack, Flask, Django,Telegram, ETL, ML)
‚Äî —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–µ (–ø–∞–π–∫–∞, —Å–µ–Ω—Å–æ—Ä—ã, NFC, Raspberry Pi, MicroPython)
‚Äî DevOps/–¥–µ–ø–ª–æ–π (VPS, cron, SSH, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ)
-üìå –Ø –Ω–µ frontend-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –∏ –Ω–µ –∑–∞–Ω–∏–º–∞—é—Å—å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∞–π—Ç–æ–≤ –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤.
–Ø —Å—Ç—Ä–æ—é backend-—Ä–µ—à–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é –ø—Ä–æ—Ü–µ—Å—Å—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ –∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É—é AI.
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–æ–≥—É —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π web-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (Flask, HTML/CSS), –Ω–æ —ç—Ç–æ –Ω–µ –º–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.


üí° –ß—Ç–æ —è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–ª:
‚Ä¢ InsightGram ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è Telegram-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (https://insightgram.ru)
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç ‚Äî Telegram-—Å–±–æ—Ä –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏, –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è KPI, auto-dashboard
‚Ä¢ SkillAnalyzer ‚Äî –≤–µ–±-—Å–µ—Ä–≤–∏—Å –æ—Ü–µ–Ω–∫–∏ Jupyter Notebook, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–¥—É
‚Ä¢ IoT-—Ç–µ—Ä–º–∏–Ω–∞–ª—ã ‚Äî NFC-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ª–æ–≥–∏—Å—Ç–∏–∫–∏, —Ç–µ—Ä–º–∏–Ω–∞–ª—ã —Å —Å–µ–Ω—Å–æ—Ä–∞–º–∏ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–º –ø–∏—Ç–∞–Ω–∏–µ–º
‚Ä¢ ML-–º–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ (Time Series, Scikit-learn)

üß† –ù–∞–≤—ã–∫–∏:
Python, SQL, Flask, Django, Pandas, Plotly, Seaborn, Aiogram, MicroPython, HTML/CSS, Git, Linux, Selenium, BeautifulSoup
Raspberry Pi, NFC (PN532), —Å–µ–Ω—Å–æ—Ä—ã, –ø–∞–π–∫–∞, –º—É–ª—å—Ç–∏–º–µ—Ç—Ä
ClickHouse, PostgreSQL, devops-–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ VPS (cron, ssh, logs)

üì¶ –ê–ø–ø–∞—Ä–∞—Ç + AI: —è —Å–æ–∑–¥–∞—é —Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∫–ª—é—á ‚Äî –æ—Ç –º–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –¥–æ AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏.

üó£Ô∏è –Ø–∑—ã–∫–∏: –†—É—Å—Å–∫–∏–π (C1), –¢—É—Ä–µ—Ü–∫–∏–π (—Ä–æ–¥–Ω–æ–π), –ê–Ω–≥–ª–∏–π—Å–∫–∏–π (B2)
üîó GitHub: https://github.com/ufukkirmizigedik
"""




params = {
    "text": "query",
    "area": "1",
    "per_page": 20,
    "page": 0
}

def extract_requirements(html_description):
    text = BeautifulSoup(html_description, "html.parser").get_text(separator="\n")
    text = text.strip()
    match = re.search(r"(–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è[:\s\n]+)(.*?)(–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏[:\s\n]+|–£—Å–ª–æ–≤–∏—è[:\s\n]+|$)", text, re.DOTALL | re.IGNORECASE)
    if match:
        return match.group(2).strip()
    match = re.search(r"(–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏[:\s\n]+)(.*?)(–£—Å–ª–æ–≤–∏—è[:\s\n]+|$)", text, re.DOTALL | re.IGNORECASE)
    if match:
        return match.group(2).strip()
    return text[:1000]

def check_gpt_suitability(requirements: str) -> str:
    # Pozitif √∂rnekleri oku
    try:
        with open("positive_examples.json", "r") as f:
            examples = json.load(f)
    except Exception as e:
        print(f"‚ö†Ô∏è √ñrnek dosya okunamadƒ±: {e}")
        examples = []

    # En fazla 3 √∂rnek kullan
    examples_text = ""
    for i, job in enumerate(examples[:3], 1):
        examples_text += f"{i}. –ù–∞–∑–≤–∞–Ω–∏–µ: {job['–Ω–∞–∑–≤–∞–Ω–∏–µ']}\n"
        examples_text += f"   –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: {job['–æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏']}\n"
        examples_text += f"   –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {job['—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è']}\n\n"

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –æ–Ω–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç—É —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏:
- –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ Python
- —Å–æ–∑–¥–∞–Ω–∏–µ Telegram-–±–æ—Ç–æ–≤
- –≤–Ω–µ–¥—Ä–µ–Ω–∏–µ RPA –∏ AI-—Ä–µ—à–µ–Ω–∏–π
- –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∏ SQL
- –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏

–í–æ—Ç 3 –ø—Ä–∏–º–µ—Ä–∞ –≤–∞–∫–∞–Ω—Å–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Ä–∞–Ω–µ–µ –ø—Ä–∏–∑–Ω–∞–Ω—ã –ü–û–î–•–û–î–Ø–©–ò–ú–ò:
{examples_text}

–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é:

{requirements}

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: "–î–ê" –∏–ª–∏ "–ù–ï–¢".
"""


    response = client.chat.completions.create(
        model="gpt-4.1-nano-2025-04-14",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –ø–æ–º–æ—â–Ω–∏–∫, –æ—Ü–µ–Ω–∏–≤–∞—é—â–∏–π –≤–∞–∫–∞–Ω—Å–∏–∏."},
            {"role": "user", "content": prompt}
        ],
        temperature=0.4
    )

    answer = response.choices[0].message.content
    return answer.strip()

# === GPT: —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ ===
def generate_pismo(requirements):
    response = client.chat.completions.create(
        model="gpt-4.1-mini-2025-04-14",
        messages=[
            {"role": "user", "content": f"""

–¢—ã ‚Äî –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ –∏–º–µ–Ω–∏ –£—Ñ—É–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –Ω–æ–≤—É—é —Ä–∞–±–æ—Ç—É –≤ —Å—Ñ–µ—Ä–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏, Python –∏ AI-—Ä–µ—à–µ–Ω–∏–π.

–í–æ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:

{requirements}

–í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω:

{profile_summary}

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∂–∏–≤–æ–µ, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–µ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ, –∫–æ—Ç–æ—Ä–æ–µ:

‚Äî –∑–≤—É—á–∏—Ç –ø–æ-—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏, –±–µ–∑ —à–∞–±–ª–æ–Ω–æ–≤ –∏ –∫–ª–∏—à–µ;
‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞;
‚Äî –æ–±—ä—è—Å–Ω—è–µ—Ç, –∫–∞–∫–∏–µ —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –∏ –ø–æ–¥—Ö–æ–¥—ã –ø–æ–º–æ–≥–∞—é—Ç —Ä–µ—à–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–¥–∞—á–∏;
‚Äî —á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ —Ç—ã –µ—â—ë –Ω–µ –¥–µ–ª–∞–ª, –Ω–æ —É–º–µ–µ—à—å —Ä–µ—à–∞—Ç—å –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–±–ª–µ–º—ã;
‚Äî —Å–æ–∑–¥–∞—ë—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ, —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏ —Ö–æ—á–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏–º–µ–Ω–Ω–æ –≤ —ç—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.

–ù–µ –≤—ã–¥—É–º—ã–≤–∞–π —Ñ–∞–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ. –õ—É—á—à–µ –ø–æ–¥—á–µ—Ä–∫–Ω–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –ø–æ–¥—Ö–æ–¥ –∏ –æ–±—Ä–∞–∑ –º—ã—à–ª–µ–Ω–∏—è.

–°–¥–µ–ª–∞–π —Ç–∞–∫, —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ –∑–∞—Ö–æ—Ç–µ–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–æ –∫–æ–Ω—Ü–∞.

"""}
        ],
        temperature=0.7
    )
    return response.choices[0].message.content.strip()

def get_resume_id():
    r = requests.get("https://api.hh.ru/resumes/mine", headers=headers)
    if r.status_code != 200:
        print(f"‚ùå /resumes/mine hatasƒ± ({r.status_code}):", r.text)
        return None
    data = r.json()
    if "items" in data and len(data["items"]) > 0:
        return data["items"][0]["id"]
    print("‚ùó –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∫–∫–∞—É–Ω—Ç–µ!")
    return None

def get_vacancy_detail(vacancy_id, retries=3):
    for attempt in range(retries):
        r = requests.get(f"https://api.hh.ru/vacancies/{vacancy_id}", headers=headers)
        if r.status_code == 200:
            time.sleep(random.uniform(1.2, 1.7))
            return r
        elif r.status_code == 429:
            wait = 2 ** attempt
            print(f"‚è≥ 429 Too Many Requests, {wait} saniye bekleniyor...")
            time.sleep(wait)
        else:
            print(f"‚ùå Detay alƒ±namadƒ± ({r.status_code}): {vacancy_id}")
            return None
    print(f"‚ùå {vacancy_id} i√ßin maksimum tekrar denemesi yapƒ±ldƒ±.")
    return None

def apply_to_job(vacancy_id, pismo):
    resume_id = get_resume_id()
    if not resume_id:
        return {"status": "fail", "reason": "no_resume"}
    url = "https://api.hh.ru/negotiations"
    payload = {
        "vacancy_id": vacancy_id,
        "resume_id": resume_id,
        "message": pismo
    }
    response = requests.post(url, headers=headers, json=payload)
    try:
        json_response = response.json()
    except:
        json_response = {"error": response.text}

    if response.status_code in [200, 201, 204]:
        return True
    else:
        print(f"‚ùå –æ—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫ ‚Üí –ö–æ–¥ {response.status_code}")
        print("‚Ü™Ô∏è –æ—Ç–≤–µ—Ç:", json_response)
        return {"status": "fail", "code": response.status_code, "response": json_response}

def has_already_applied(vacancy_id, query_text):
    safe_query = query_text.replace("/", "-")
    log_path = os.path.join("logs", f"{safe_query}.json")
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return any(entry["id"] == vacancy_id for entry in data)
    except:
        return False

def was_gpt_checked(vacancy_id, query_text):
    safe_query = query_text.replace("/", "-")
    log_path = os.path.join("logs", f"{safe_query}_gpt_decisions.json")
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return any(entry["id"] == vacancy_id for entry in data)
    except:
        return False

def log_gpt_decision(vacancy_id, decision, query_text):
    log_entry = {
        "id": vacancy_id,
        "decision": decision,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M")
    }
    safe_query = query_text.replace("/", "-")
    log_path = os.path.join("logs", f"{safe_query}_gpt_decisions.json")
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(log_entry)
    with open(log_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def log_application(vacancy, pismo, query_text):
    log_entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M"),
        "id": vacancy["id"],
        "name": vacancy["name"],
        "company": vacancy["employer"]["name"],
        "url": vacancy["alternate_url"],
        "pismo": pismo
    }
    safe_query = query_text.replace("/", "-")
    log_dir = "logs"
    os.makedirs(log_dir, exist_ok=True)
    log_path = os.path.join(log_dir, f"{safe_query}.json")
    try:
        with open(log_path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = []
    data.append(log_entry)
    with open(log_path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def main():
    for query in search_queries:
        print(f"\nüîé –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {query}")
        current_page = 0
        MAX_PAGES = 5

        while current_page < MAX_PAGES:
            params["text"] = query
            params["page"] = current_page
            response = requests.get("https://api.hh.ru/vacancies", headers=headers, params=params)
            if response.status_code != 200:
                print(f"‚ùå API hatasƒ± ({response.status_code}):", response.text)
                break

            data = response.json()
            vacancies = data.get("items", [])
            if not vacancies:
                break

            print(f"üî¢ –ù–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {current_page + 1}: {len(vacancies)}")

            for vacancy in vacancies[:2]:
                vacancy_id = vacancy["id"]
                print(f"üìå Vacancy ID: {vacancy_id}")

                # === YENƒ∞ EKLENEN TARƒ∞H Fƒ∞LTRESƒ∞ ===
                published_at = vacancy.get("published_at", "")
                if published_at:
                    publish_date = datetime.fromisoformat(published_at[:19])
                    if publish_date.date() != datetime.today().date():
                        print("üìÜ Bug√ºn yayƒ±nlanmamƒ±≈ü ‚Äî atlanƒ±yor.")
                        continue


                salary = vacancy.get("salary")
                if salary:
                    if salary.get("from") and salary["from"] < 100000:
                        print(f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è (–æ—Ç {salary['from']}‚ÇΩ) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue
                    if salary.get("to") and salary["to"] < 100000:
                        print(f"üí∏ –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –∑–∞—Ä–ø–ª–∞—Ç—ã –Ω–∏–∑–∫–∞—è (–¥–æ {salary['to']}‚ÇΩ) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                        continue

                if has_already_applied(vacancy_id, query):
                    print("‚è© –û—Ç–∫–ª–∏–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")
                    continue

                detail_response = get_vacancy_detail(vacancy_id)
                if not detail_response:
                    continue

                detail = detail_response.json()
                html_desc = detail.get("description", "")
                if not html_desc:
                    html_desc = detail.get("snippet", {}).get("responsibility", "")

                requirements = extract_requirements(html_desc)
                if not requirements.strip():
                    full_text = BeautifulSoup(html_desc, "html.parser").get_text()
                    if len(full_text.strip()) > 200:
                        print("‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è snippet.")
                        requirements = full_text.strip()
                    else:
                        print("‚ö†Ô∏è ƒ∞lan a√ßƒ±klamasƒ± bo≈ü veya alƒ±namadƒ±, GPT deƒüerlendirmesi atlanƒ±yor.")
                        continue

                print(f"\nüîç {vacancy['name']} ({vacancy_id}) ‚Äî {vacancy['employer']['name']}")
                print(f"URL: {vacancy['alternate_url']}")
                if was_gpt_checked(vacancy_id, query):
                    print("‚è≠Ô∏è Bu ilan GPT ile daha √∂nce kontrol edilmi≈ü.")
                    continue

                decision = check_gpt_suitability(requirements)
                print("–†–ï–®–ï–ù–ò–ï GPT:", decision)
                log_gpt_decision(vacancy_id, decision, query)

                if "–î–ê" in decision.strip().upper():
                    print("‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç! ‚Äî —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –≥–æ—Ç–æ–≤–∏—Ç—Å—è...")
                    pismo = generate_pismo(requirements)
                    print("--- –ù–∞—á–∞–ª–æ –ø–∏—Å—å–º–æ ---")
                    print(pismo[:300], "...")
                    print("üì§ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...")
                    result = apply_to_job(vacancy_id, pismo)
                    if result is True:
                        print("‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
                        log_application(vacancy, pismo, query)
                    else:
                        print("‚ùå Ba≈üvuru ba≈üarƒ±sƒ±z.")
                else:
                    print("‚õî –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç!, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º.")

            current_page += 1

if __name__ == "__main__":
    main()